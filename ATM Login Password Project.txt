/**
 * ATM Interface in Java The ATM interface is a Java application designed to provide a user-friendly
 * and efficient experience for managing banking transactions. It incorporates the principles of
 * Object-Oriented Programming (OOP) to organize the code into modular and reusable components.
 *
 * User Authentication: Users can securely log in using their unique credentials. Object-oriented
 * design ensures encapsulation and protection of sensitive user information.
 *
 * Transaction Management: Supports various transactions like balance inquiry, cash withdrawal,
 * deposit, and fund transfers. Utilizes OOP principles such as encapsulation to keep transaction
 * details private.
 *
 * Heap Sort for Transaction History: Implements heap sort to efficiently organize and display
 * transaction history. Ensures quick retrieval and display of recent transactions.
 *
 * Account Management: Users can manage their account details, including updating personal information
 * and changing PINs. Encapsulation and inheritance are employed to create a robust account management system.
 *
 * GUI (Graphical User Interface): Employs Java's Swing or JavaFX for a user-friendly graphical interface.
 * Adheres to design principles for a clean and intuitive layout.
 *
 * Concurrency and Security: Utilizes OOP concepts such as multithreading for concurrent processing of
 * transactions. Implements security measures to protect against unauthorized access and transactions.
 *
 * Code Organization: Classes like User, Account, and Transaction follow OOP principles. The HeapSort
 * class handles sorting of transaction history using the heap sort algorithm.
 *
 * Conclusion: The ATM interface in Java showcases the power of object-oriented design, ensuring modularity,
 * reusability, and maintainability. The integration of heap sort enhances the efficiency of managing
 * transaction history, providing users with a seamless and secure banking experience.
 */

package oops;
import java.sql.SQLOutput;
import java.util.*;

public class ATM{
    public static void main(String[] args) {
        ATMop obj = new ATMop();
    }
}
class Data{
    int balance;
}

 class ATMop {
    HashMap<Integer , Data >  map  = new HashMap<>();

    Scanner sc = new Scanner(System.in);
    ATMop(){
            System.out.println("Welcome to our ATM");
            op();
    }

     public  void op(){
        
         System.out.print("Enter valid pin : ");

         int pin = sc.nextInt();

         if(map.containsKey(pin)){
             Data obj = map.get(pin);
             menu(obj);
         }
         else{

             System.out.println("Please create account first ");
             System.out.println("Set pin code (greater than 2  and less than 5)");
             System.out.print("Set pin here : ");

             int setpin = sc.nextInt();

             Data obj = new Data();
             if(Integer.toString(setpin).length() < 5 && 2<Integer.toString(setpin).length() ){
                 obj.balance = 0;
                 map.put(setpin , obj);
                 menu(obj);
             }
             else{
                 System.out.println("Invalid pin system terminate");
             }
         }
     }


    public void menu(Data obj){
        System.out.println("");
        System.out.println("Enter your choice");

        System.out.println("1 . Check balance");
        System.out.println("2 . Withdraw money");
        System.out.println("3 . Deposit money");
        System.out.println("4 . Exit");
        System.out.println("5 . Check another account");
        System.out.print("Enter option choose : ");
        int x = sc.nextInt();

        if(x == 1){
            check_balance(obj);
        }
        else if(x==2){
            withdraw(obj);
        }
        else if(x==3){
            deposite(obj);
        }
        else if(x == 4){
            System.out.println("Thank you for using our ATM ...");
            System.out.println("Visit us again ");
        }
        else if(x == 5){
//            ATMop obj = new ATMop();
            op();
        }
        else{
            System.out.println("Enter valid option : ");
            menu(obj);
        }
    }

    public void check_balance(Data obj){
        System.out.println("Your current balance is :  " + obj.balance);
        System.out.println("*");
        menu(obj);
    }

    public void deposite(Data obj){
        System.out.print("Enter the amount : ");
        float d = sc.nextFloat();
        obj.balance += d;
        System.out.println("Amount deposited successfully ✅");
        System.out.println("*");
        System.out.println();
        menu(obj);
    }

    public void withdraw(Data obj){
        System.out.print("Enter the amount : ");
        float d = sc.nextFloat();
       if(d > obj.balance) {
           System.out.println("Transaction failed because of low balance : "+obj.balance);
           System.out.println("Insufficient balance"); menu(obj);}
        obj.balance -= d;
        System.out.println("Amount withdraw successfully ✅");
        System.out.println("");
        menu(obj);
    }
}